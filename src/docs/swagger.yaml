openapi: 3.0.0
info:
  title: My Express API
  version: 1.0.0
  description: API documentation for my express app.
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /api/users:
    get:
      summary: Retrieve a list of Users
      parameters: 
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: The number of users to return
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successfully retrieved a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties: 
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10
                            default: 10
                          hasNext:
                            type: boolean
                            example: true
                          nextPage:
                            type: integer
                            example: 2
                            nullable: true
                  status:
                    type: integer
                    example: 200
                  error:
                    type: object
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}:
    get:
      summary: Retrieve a single User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve
      responses:
        '200':
          description: Successfully retrieved a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a User
      parameters:
        - in : path
          name: id
          required: true
          schema:
            type: integer
            description: The ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/status:
    get:
      summary: Check the status of the API
      responses:
        '200':
          description: API is up and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ok'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 12345
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        filePath:
          type: string
          example: '/uploads/profile.jpg'
    NewUser:
      type: object
      required:
        - email
        - password
      properties:
        name: 
          type: string
          example: "John Doe"
          format: string
        email:
          type: string
          example: "john@example.com"
          format: email
        password:
          type: string
          example: "password123"
          format: password
    Error:
      type: object
      properties: 
        success:
          type: boolean
          example: false
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "Error message here"